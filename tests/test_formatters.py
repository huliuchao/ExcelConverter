"""测试格式化器

测试各种格式化器的功能。
"""

import pytest
from excel_converter.formatters.lua_formatter import LuaFormatter
from excel_converter.formatters.json_variants import JsonMapFormatter, JsonArrayFormatter


class TestLuaFormatter:
    """测试Lua格式化器"""
    
    @pytest.fixture
    def sample_data(self):
        """测试数据"""
        return {
            1001: {
                "ID": 1001,
                "Name": "Test Item",
                "Config": {
                    "Type": "weapon",
                    "Level": 5
                },
                "Effects": ["fire", "poison"]
            },
            1002: {
                "ID": 1002,
                "Name": "Another Item",
                "Config": {
                    "Type": "armor",
                    "Level": 3
                },
                "Effects": ["defense"]
            }
        }
    
    def test_lua_formatter_readable(self, sample_data):
        """测试Lua格式化器可读模式"""
        formatter = LuaFormatter(compact=False)
        result = formatter.format_data(sample_data, "test_items")
        
        # 检查基本结构
        assert "-- test_items Data" in result
        assert "-- Auto-generated by Excel Converter" in result
        assert "return {" in result
        assert "}" in result
        
        # 检查格式化风格（有空格和缩进）
        assert "ID = 1001" in result
        assert "Name = \"Test Item\"" in result
        assert "Type = \"weapon\"" in result
        
        # 检查数组格式
        assert "{\"fire\", \"poison\"}" in result
    
    def test_lua_formatter_compact(self, sample_data):
        """测试Lua格式化器紧凑模式"""
        formatter = LuaFormatter(compact=True)
        result = formatter.format_data(sample_data, "test_items")
        
        # 检查紧凑特征
        assert "-- test_items Data" not in result  # 没有注释
        assert "return {" in result
        assert "}" in result
        
        # 检查紧凑格式（没有多余空格）
        assert "ID=1001" in result
        assert "Name=\"Test Item\"" in result
        assert "Type=\"weapon\"" in result
        
        # 检查数组紧凑格式
        assert "{\"fire\",\"poison\"}" in result
        
        # 确保没有多余的空行
        assert not result.endswith("\n\n")
    
    def test_lua_formatter_format_name(self):
        """测试格式化器名称"""
        readable_formatter = LuaFormatter(compact=False)
        compact_formatter = LuaFormatter(compact=True)
        
        assert readable_formatter.format_name == "lua"
        assert compact_formatter.format_name == "lua_compact"
    
    def test_lua_compact_vs_readable_size(self, sample_data):
        """测试紧凑模式与可读模式的大小差异"""
        readable_formatter = LuaFormatter(compact=False)
        compact_formatter = LuaFormatter(compact=True)
        
        readable_result = readable_formatter.format_data(sample_data, "test_items")
        compact_result = compact_formatter.format_data(sample_data, "test_items")
        
        # 紧凑模式应该更小
        assert len(compact_result) < len(readable_result)
        
        # 但差异不应该太极端（保持可读性）
        size_ratio = len(compact_result) / len(readable_result)
        assert 0.5 < size_ratio < 0.9  # 紧凑模式大约是可读模式的50%-90%


class TestJsonFormatters:
    """测试JSON格式化器对比"""
    
    @pytest.fixture
    def sample_data(self):
        """测试数据"""
        return {
            1001: {
                "ID": 1001,
                "Name": "Test Item"
            }
        }
    
    def test_json_compact_effectiveness(self, sample_data):
        """测试JSON紧凑模式的效果"""
        readable_formatter = JsonMapFormatter(compact=False)
        compact_formatter = JsonMapFormatter(compact=True)
        
        readable_result = readable_formatter.format_data(sample_data, "test")
        compact_result = compact_formatter.format_data(sample_data, "test")
        
        # JSON紧凑模式应该显著减少大小
        assert len(compact_result) < len(readable_result)
        
        # JSON紧凑模式效果应该更明显
        size_ratio = len(compact_result) / len(readable_result)
        assert size_ratio < 0.6  # JSON紧凑模式应该减少40%以上的大小


class TestCompactModeBehavior:
    """测试紧凑模式的行为差异"""
    
    def test_compact_mode_preserves_functionality(self):
        """测试紧凑模式保持功能完整性"""
        test_data = {
            "simple": 123,
            "nested": {
                "key": "value",
                "number": 456
            },
            "array": [1, 2, 3]
        }
        
        readable_formatter = LuaFormatter(compact=False)
        compact_formatter = LuaFormatter(compact=True)
        
        readable_result = readable_formatter.format_data(test_data, "test")
        compact_result = compact_formatter.format_data(test_data, "test")
        
        # 两种模式都应该包含相同的基本内容
        assert "simple=123" in compact_result
        assert "key=\"value\"" in compact_result
        assert "{1,2,3}" in compact_result
        
        assert "simple = 123" in readable_result
        assert "key = \"value\"" in readable_result
        assert "{1, 2, 3}" in readable_result